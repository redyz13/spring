# Environment: development | production
app.env=development

# Allowed origins for CORS (comma-separated list)
cors.allowedOrigins=http://localhost:3000

# The port on which the API Gateway will run
server.port=8080

# The name of the service as it will be registered in Eureka
spring.application.name=api-gateway

# The Eureka Server URL where the API Gateway should register itself
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# Enable the API Gateway to register itself with Eureka
eureka.client.register-with-eureka=true

# Enable the API Gateway to fetch the list of available services from Eureka
eureka.client.fetch-registry=true

# Unique instance ID for the API Gateway (useful for multiple instances)
eureka.instance.instanceId=${spring.application.name}:${spring.application.instance_id:${random.value}}

# JWT configuration
jwt.accessSecret=${JWT_ACCESS_SECRET_KEY}
jwt.refreshSecret=${JWT_REFRESH_SECRET_KEY}

# API Gateway route configurations (dynamically maps paths to microservices)
spring.cloud.gateway.routes[0].id=authors-service
spring.cloud.gateway.routes[0].uri=lb://authors-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/authors/**
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

spring.cloud.gateway.routes[1].id=books-service
spring.cloud.gateway.routes[1].uri=lb://books-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/books/**
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1

spring.cloud.gateway.routes[2].id=auth-service
spring.cloud.gateway.routes[2].uri=lb://auth-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/auth/**
spring.cloud.gateway.routes[2].filters[0]=StripPrefix=1
